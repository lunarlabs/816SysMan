; IGNTION: system startup, initialization, handoff

;The 65C816 starts off in emulation mode, which drives the E pin high.
;Since we want to use the signal from the "E" pin as a fault indicator,
;the reboot code will pretty much be the only code run in emu mode.

.out "Assembling Ignition..."

.p816
.macpack generic
.macpack longbranch

.include "../macro/tweaks.a65"
.include "../macro/scope.a65"

.export _boot
.import __DATA_LOAD__, __DATA_SIZE__, __DATA_RUN__      ;linker defined memory constants

.segment "STARTUP"
_boot:
.proc   ColdBoot

        sec     ;If we were called from, for example, NMI acting as RESET, make sure we drop back down into emulation mode...
        xce

        .a8
        .i8     ;we start with the processor in emulation mode; all registers size 8

        di      ;no IRQs during this part.
        lda #%01011010  ;first memory test
        ldx #0

Test1:  sta $0000,x     ;write to the zero page...
        sta $0100,x     ;and the stack page
        inx             
        bne Test1

        ldy #0

Wait1:  inx
        bne Wait1
        iny
        bne Wait1        ;wait to see if the ram keeps data over time...

Check1: cmp $0000,x     
        bne Die         ;Not equal! Get dead, kid.
        cmp $0100,x
        bne Die
        inx
        bne Check1

        cmp #%10100101  ;Did we run the second test?
        beq Step2       ;If so, go to next part.

        lda #%10100101  ;load the inverse test pattern.
        bra Test1       ;And check again.

Die:    stp             ;Bad RAM. Halt the CPU, leaving the fault light on.

Step2:  ldx #$FF
        txa             ;stack pointer is now $1FF
        
        clc
        xce             ;We are now in native mode! This turns the E signal off.

        ai16
        lda #(__DATA_SIZE__ - 1) ;block moves require number of bytes >minus one< in the accumulator.
        ldx #__DATA_LOAD__
        ldy #__DATA_RUN__

        mvn 0,0    ;copy the data out of ROM into RAM so it can be modified later.

        ;Now we go ahead and load in the hardware...
        ;Device nodes use .CONDES to get their nodes added in, so figure that crap out.
        ;take a look at https://github.com/cc65/cc65/blob/master/libsrc/runtime/condes.s

.endproc

