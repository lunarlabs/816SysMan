FEATURES{
    STARTADDRESS:   default = $00D000;
}
MEMORY {
    RAM1:   start = $000000, size = $00C000;
    IO:     start = $00C200, size = $000200, define = yes;
    ROM:    start = $00D000, size = $001fe0, type = ro, fill = yes, fillval = $00;
    VEC:    start = $00ffe0, size = $000020; #Little hacky but ld65 complains that the 32-byte-long
                                             #VECTORS segment overflows by 4096 bytes if I place it in ROM. Too bad!
    RAM2:   start = $010000, size = $070000;
}
SEGMENTS {
    SYSDP:  load = RAM1, type = bss, start = $0, define = yes;
    STARTUP:load = ROM, type = ro;
    CODE:   load = ROM, type = ro, align = $100;
    RODATA: load = ROM, type = ro, align = $100;
    DATA:   load = ROM, run = RAM1, type = rw, align = $100, define = yes;
    VECTORS:load = VEC, type = ro;
}
SYMBOLS{
    __IOCMDBITS__:  type = weak, value = $6; #how many left shifts are needed before adding the IO directive to the IO base address?
    __IOLIMIT__:    type = weak, value = $8; #How many peripherals are in the IO space?
}